/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace org.adaptagrams.cola {

using System;
using System.Runtime.InteropServices;

public class Rectangle : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Rectangle(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Rectangle obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Rectangle() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        colaPINVOKE.delete_Rectangle(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public static double xBorder {
    set {
      colaPINVOKE.Rectangle_xBorder_set(value);
    } 
    get {
      double ret = colaPINVOKE.Rectangle_xBorder_get();
      return ret;
    } 
  }

  public static double yBorder {
    set {
      colaPINVOKE.Rectangle_yBorder_set(value);
    } 
    get {
      double ret = colaPINVOKE.Rectangle_yBorder_get();
      return ret;
    } 
  }

  public Rectangle(double x, double X, double y, double Y, bool allowOverlap) : this(colaPINVOKE.new_Rectangle__SWIG_0(x, X, y, Y, allowOverlap), true) {
  }

  public Rectangle(double x, double X, double y, double Y) : this(colaPINVOKE.new_Rectangle__SWIG_1(x, X, y, Y), true) {
  }

  public Rectangle(Rectangle Other) : this(colaPINVOKE.new_Rectangle__SWIG_2(Rectangle.getCPtr(Other)), true) {
    if (colaPINVOKE.SWIGPendingException.Pending) throw colaPINVOKE.SWIGPendingException.Retrieve();
  }

  public Rectangle() : this(colaPINVOKE.new_Rectangle__SWIG_3(), true) {
  }

  public void reset(uint d, double x, double X) {
    colaPINVOKE.Rectangle_reset(swigCPtr, d, x, X);
  }

  public double getMaxX() {
    double ret = colaPINVOKE.Rectangle_getMaxX(swigCPtr);
    return ret;
  }

  public double getMaxY() {
    double ret = colaPINVOKE.Rectangle_getMaxY(swigCPtr);
    return ret;
  }

  public double getMinX() {
    double ret = colaPINVOKE.Rectangle_getMinX(swigCPtr);
    return ret;
  }

  public double getMinY() {
    double ret = colaPINVOKE.Rectangle_getMinY(swigCPtr);
    return ret;
  }

  public double getMinD(uint d) {
    double ret = colaPINVOKE.Rectangle_getMinD(swigCPtr, d);
    return ret;
  }

  public double getMaxD(uint d) {
    double ret = colaPINVOKE.Rectangle_getMaxD(swigCPtr, d);
    return ret;
  }

  public double getCentreX() {
    double ret = colaPINVOKE.Rectangle_getCentreX(swigCPtr);
    return ret;
  }

  public double getCentreY() {
    double ret = colaPINVOKE.Rectangle_getCentreY(swigCPtr);
    return ret;
  }

  public double getCentreD(uint d) {
    double ret = colaPINVOKE.Rectangle_getCentreD(swigCPtr, d);
    return ret;
  }

  public double width() {
    double ret = colaPINVOKE.Rectangle_width(swigCPtr);
    return ret;
  }

  public double height() {
    double ret = colaPINVOKE.Rectangle_height(swigCPtr);
    return ret;
  }

  public double length(uint d) {
    double ret = colaPINVOKE.Rectangle_length(swigCPtr, d);
    return ret;
  }

  public void set_width(double w) {
    colaPINVOKE.Rectangle_set_width(swigCPtr, w);
  }

  public void set_height(double h) {
    colaPINVOKE.Rectangle_set_height(swigCPtr, h);
  }

  public void moveCentreD(uint d, double p) {
    colaPINVOKE.Rectangle_moveCentreD(swigCPtr, d, p);
  }

  public void moveCentreX(double x) {
    colaPINVOKE.Rectangle_moveCentreX(swigCPtr, x);
  }

  public void moveCentreY(double y) {
    colaPINVOKE.Rectangle_moveCentreY(swigCPtr, y);
  }

  public void moveCentre(double x, double y) {
    colaPINVOKE.Rectangle_moveCentre(swigCPtr, x, y);
  }

  public void moveMinX(double x) {
    colaPINVOKE.Rectangle_moveMinX(swigCPtr, x);
  }

  public void moveMinY(double y) {
    colaPINVOKE.Rectangle_moveMinY(swigCPtr, y);
  }

  public double overlapD(uint d, Rectangle r) {
    double ret = colaPINVOKE.Rectangle_overlapD(swigCPtr, d, Rectangle.getCPtr(r));
    return ret;
  }

  public double overlapX(Rectangle r) {
    double ret = colaPINVOKE.Rectangle_overlapX(swigCPtr, Rectangle.getCPtr(r));
    return ret;
  }

  public double overlapY(Rectangle r) {
    double ret = colaPINVOKE.Rectangle_overlapY(swigCPtr, Rectangle.getCPtr(r));
    return ret;
  }

  public bool allowOverlap() {
    bool ret = colaPINVOKE.Rectangle_allowOverlap(swigCPtr);
    return ret;
  }

  public void offset(double dx, double dy) {
    colaPINVOKE.Rectangle_offset(swigCPtr, dx, dy);
  }

  public void lineIntersections(double x1, double y1, double x2, double y2, RectangleIntersections ri) {
    colaPINVOKE.Rectangle_lineIntersections(swigCPtr, x1, y1, x2, y2, RectangleIntersections.getCPtr(ri));
    if (colaPINVOKE.SWIGPendingException.Pending) throw colaPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool inside(double x, double y) {
    bool ret = colaPINVOKE.Rectangle_inside(swigCPtr, x, y);
    return ret;
  }

  public bool overlaps(double x1, double y1, double x2, double y2) {
    bool ret = colaPINVOKE.Rectangle_overlaps(swigCPtr, x1, y1, x2, y2);
    return ret;
  }

  public void routeAround(double x1, double y1, double x2, double y2, SWIGTYPE_p_std__vectorT_double_t xs, SWIGTYPE_p_std__vectorT_double_t ys) {
    colaPINVOKE.Rectangle_routeAround(swigCPtr, x1, y1, x2, y2, SWIGTYPE_p_std__vectorT_double_t.getCPtr(xs), SWIGTYPE_p_std__vectorT_double_t.getCPtr(ys));
    if (colaPINVOKE.SWIGPendingException.Pending) throw colaPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
