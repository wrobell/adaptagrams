/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace org.adaptagrams.cola {

using System;
using System.Runtime.InteropServices;

public class Lock : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Lock(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Lock obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Lock() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        colaPINVOKE.delete_Lock(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public Lock() : this(colaPINVOKE.new_Lock__SWIG_0(), true) {
  }

  public Lock(uint id, double X, double Y) : this(colaPINVOKE.new_Lock__SWIG_1(id, X, Y), true) {
  }

  public uint getID() {
    uint ret = colaPINVOKE.Lock_getID(swigCPtr);
    return ret;
  }

  public double pos(Dim dim) {
    double ret = colaPINVOKE.Lock_pos(swigCPtr, (int)dim);
    return ret;
  }

}

}
