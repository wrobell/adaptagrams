/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace org.adaptagrams.cola {

using System;
using System.Runtime.InteropServices;

public class TestConvergence : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TestConvergence(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(TestConvergence obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~TestConvergence() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        colaPINVOKE.delete_TestConvergence(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public double old_stress {
    set {
      colaPINVOKE.TestConvergence_old_stress_set(swigCPtr, value);
    } 
    get {
      double ret = colaPINVOKE.TestConvergence_old_stress_get(swigCPtr);
      return ret;
    } 
  }

  public TestConvergence(double tol, uint maxiterations) : this(colaPINVOKE.new_TestConvergence__SWIG_0(tol, maxiterations), true) {
  }

  public TestConvergence(double tol) : this(colaPINVOKE.new_TestConvergence__SWIG_1(tol), true) {
  }

  public TestConvergence() : this(colaPINVOKE.new_TestConvergence__SWIG_2(), true) {
  }

  public virtual bool testoperator(double new_stress, SWIGTYPE_p_std__valarrayT_double_t X, SWIGTYPE_p_std__valarrayT_double_t Y) {
    bool ret = colaPINVOKE.TestConvergence_testoperator(swigCPtr, new_stress, SWIGTYPE_p_std__valarrayT_double_t.getCPtr(X), SWIGTYPE_p_std__valarrayT_double_t.getCPtr(Y));
    if (colaPINVOKE.SWIGPendingException.Pending) throw colaPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void reset() {
    colaPINVOKE.TestConvergence_reset(swigCPtr);
  }

  public double tolerance {
    get {
      double ret = colaPINVOKE.TestConvergence_tolerance_get(swigCPtr);
      return ret;
    } 
  }

  public uint maxiterations {
    get {
      uint ret = colaPINVOKE.TestConvergence_maxiterations_get(swigCPtr);
      return ret;
    } 
  }

  public uint iterations {
    set {
      colaPINVOKE.TestConvergence_iterations_set(swigCPtr, value);
    } 
    get {
      uint ret = colaPINVOKE.TestConvergence_iterations_get(swigCPtr);
      return ret;
    } 
  }

}

}
