/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace org.adaptagrams.cola {

using System;
using System.Runtime.InteropServices;

public class EdgePoint : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal EdgePoint(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(EdgePoint obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~EdgePoint() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        colaPINVOKE.delete_EdgePoint(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public Node node {
    set {
      colaPINVOKE.EdgePoint_node_set(swigCPtr, Node.getCPtr(value));
    } 
    get {
      IntPtr cPtr = colaPINVOKE.EdgePoint_node_get(swigCPtr);
      Node ret = (cPtr == IntPtr.Zero) ? null : new Node(cPtr, false);
      return ret;
    } 
  }

  public EdgePoint.RectIntersect rectIntersect {
    set {
      colaPINVOKE.EdgePoint_rectIntersect_set(swigCPtr, (int)value);
    } 
    get {
      EdgePoint.RectIntersect ret = (EdgePoint.RectIntersect)colaPINVOKE.EdgePoint_rectIntersect_get(swigCPtr);
      return ret;
    } 
  }

  public EdgePoint(Node n, EdgePoint.RectIntersect i) : this(colaPINVOKE.new_EdgePoint(Node.getCPtr(n), (int)i), true) {
  }

  public double pos(Dim dim) {
    double ret = colaPINVOKE.EdgePoint_pos(swigCPtr, (int)dim);
    return ret;
  }

  public double posX() {
    double ret = colaPINVOKE.EdgePoint_posX(swigCPtr);
    return ret;
  }

  public double posY() {
    double ret = colaPINVOKE.EdgePoint_posY(swigCPtr);
    return ret;
  }

  public ushort rectIntersectAsVertexNumber() {
    ushort ret = colaPINVOKE.EdgePoint_rectIntersectAsVertexNumber(swigCPtr);
    return ret;
  }

  public bool uniqueCheck(EdgePoint e) {
    bool ret = colaPINVOKE.EdgePoint_uniqueCheck(swigCPtr, EdgePoint.getCPtr(e));
    return ret;
  }

  public bool isEnd() {
    bool ret = colaPINVOKE.EdgePoint_isEnd(swigCPtr);
    return ret;
  }

  public bool assertConvexBend() {
    bool ret = colaPINVOKE.EdgePoint_assertConvexBend(swigCPtr);
    return ret;
  }

  public double offset() {
    double ret = colaPINVOKE.EdgePoint_offset(swigCPtr);
    return ret;
  }

  public enum RectIntersect {
    TR,
    BR,
    BL,
    TL,
    CENTRE
  }

}

}
