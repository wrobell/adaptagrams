/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace org.adaptagrams.cola {

using System;
using System.Runtime.InteropServices;

public class RectangleIntersections : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RectangleIntersections(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(RectangleIntersections obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~RectangleIntersections() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        colaPINVOKE.delete_RectangleIntersections(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public bool intersects {
    set {
      colaPINVOKE.RectangleIntersections_intersects_set(swigCPtr, value);
    } 
    get {
      bool ret = colaPINVOKE.RectangleIntersections_intersects_get(swigCPtr);
      return ret;
    } 
  }

  public bool top {
    set {
      colaPINVOKE.RectangleIntersections_top_set(swigCPtr, value);
    } 
    get {
      bool ret = colaPINVOKE.RectangleIntersections_top_get(swigCPtr);
      return ret;
    } 
  }

  public bool bottom {
    set {
      colaPINVOKE.RectangleIntersections_bottom_set(swigCPtr, value);
    } 
    get {
      bool ret = colaPINVOKE.RectangleIntersections_bottom_get(swigCPtr);
      return ret;
    } 
  }

  public bool left {
    set {
      colaPINVOKE.RectangleIntersections_left_set(swigCPtr, value);
    } 
    get {
      bool ret = colaPINVOKE.RectangleIntersections_left_get(swigCPtr);
      return ret;
    } 
  }

  public bool right {
    set {
      colaPINVOKE.RectangleIntersections_right_set(swigCPtr, value);
    } 
    get {
      bool ret = colaPINVOKE.RectangleIntersections_right_get(swigCPtr);
      return ret;
    } 
  }

  public double topX {
    set {
      colaPINVOKE.RectangleIntersections_topX_set(swigCPtr, value);
    } 
    get {
      double ret = colaPINVOKE.RectangleIntersections_topX_get(swigCPtr);
      return ret;
    } 
  }

  public double topY {
    set {
      colaPINVOKE.RectangleIntersections_topY_set(swigCPtr, value);
    } 
    get {
      double ret = colaPINVOKE.RectangleIntersections_topY_get(swigCPtr);
      return ret;
    } 
  }

  public double bottomX {
    set {
      colaPINVOKE.RectangleIntersections_bottomX_set(swigCPtr, value);
    } 
    get {
      double ret = colaPINVOKE.RectangleIntersections_bottomX_get(swigCPtr);
      return ret;
    } 
  }

  public double bottomY {
    set {
      colaPINVOKE.RectangleIntersections_bottomY_set(swigCPtr, value);
    } 
    get {
      double ret = colaPINVOKE.RectangleIntersections_bottomY_get(swigCPtr);
      return ret;
    } 
  }

  public double leftX {
    set {
      colaPINVOKE.RectangleIntersections_leftX_set(swigCPtr, value);
    } 
    get {
      double ret = colaPINVOKE.RectangleIntersections_leftX_get(swigCPtr);
      return ret;
    } 
  }

  public double leftY {
    set {
      colaPINVOKE.RectangleIntersections_leftY_set(swigCPtr, value);
    } 
    get {
      double ret = colaPINVOKE.RectangleIntersections_leftY_get(swigCPtr);
      return ret;
    } 
  }

  public double rightX {
    set {
      colaPINVOKE.RectangleIntersections_rightX_set(swigCPtr, value);
    } 
    get {
      double ret = colaPINVOKE.RectangleIntersections_rightX_get(swigCPtr);
      return ret;
    } 
  }

  public double rightY {
    set {
      colaPINVOKE.RectangleIntersections_rightY_set(swigCPtr, value);
    } 
    get {
      double ret = colaPINVOKE.RectangleIntersections_rightY_get(swigCPtr);
      return ret;
    } 
  }

  public RectangleIntersections() : this(colaPINVOKE.new_RectangleIntersections(), true) {
  }

  public int countIntersections() {
    int ret = colaPINVOKE.RectangleIntersections_countIntersections(swigCPtr);
    return ret;
  }

  public void print() {
    colaPINVOKE.RectangleIntersections_print(swigCPtr);
  }

  public void nearest(double x, double y, SWIGTYPE_p_double xi, SWIGTYPE_p_double yi) {
    colaPINVOKE.RectangleIntersections_nearest(swigCPtr, x, y, SWIGTYPE_p_double.getCPtr(xi), SWIGTYPE_p_double.getCPtr(yi));
    if (colaPINVOKE.SWIGPendingException.Pending) throw colaPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
