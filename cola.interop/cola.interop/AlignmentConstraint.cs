/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace org.adaptagrams.cola {

using System;
using System.Runtime.InteropServices;

public class AlignmentConstraint : CompoundConstraint {
  private HandleRef swigCPtr;

  internal AlignmentConstraint(IntPtr cPtr, bool cMemoryOwn) : base(colaPINVOKE.AlignmentConstraintUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(AlignmentConstraint obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~AlignmentConstraint() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        colaPINVOKE.delete_AlignmentConstraint(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public AlignmentConstraint(double pos) : this(colaPINVOKE.new_AlignmentConstraint(pos), true) {
  }

  public override void updatePosition() {
    colaPINVOKE.AlignmentConstraint_updatePosition(swigCPtr);
  }

  public void fixPos(double pos) {
    colaPINVOKE.AlignmentConstraint_fixPos(swigCPtr, pos);
  }

  public void unfixPos() {
    colaPINVOKE.AlignmentConstraint_unfixPos(swigCPtr);
  }

  public OffsetList offsets {
    set {
      colaPINVOKE.AlignmentConstraint_offsets_set(swigCPtr, OffsetList.getCPtr(value));
    } 
    get {
      IntPtr cPtr = colaPINVOKE.AlignmentConstraint_offsets_get(swigCPtr);
      OffsetList ret = (cPtr == IntPtr.Zero) ? null : new OffsetList(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_void guide {
    set {
      colaPINVOKE.AlignmentConstraint_guide_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      IntPtr cPtr = colaPINVOKE.AlignmentConstraint_guide_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public double position {
    set {
      colaPINVOKE.AlignmentConstraint_position_set(swigCPtr, value);
    } 
    get {
      double ret = colaPINVOKE.AlignmentConstraint_position_get(swigCPtr);
      return ret;
    } 
  }

  public bool isFixed {
    set {
      colaPINVOKE.AlignmentConstraint_isFixed_set(swigCPtr, value);
    } 
    get {
      bool ret = colaPINVOKE.AlignmentConstraint_isFixed_get(swigCPtr);
      return ret;
    } 
  }

  public override void generateVariables(SWIGTYPE_p_std__vectorT_vpsc__Variable_p_t vars) {
    colaPINVOKE.AlignmentConstraint_generateVariables(swigCPtr, SWIGTYPE_p_std__vectorT_vpsc__Variable_p_t.getCPtr(vars));
    if (colaPINVOKE.SWIGPendingException.Pending) throw colaPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void generateSeparationConstraints(SWIGTYPE_p_std__vectorT_vpsc__Variable_p_t vars, SWIGTYPE_p_std__vectorT_vpsc__Constraint_p_t cs) {
    colaPINVOKE.AlignmentConstraint_generateSeparationConstraints(swigCPtr, SWIGTYPE_p_std__vectorT_vpsc__Variable_p_t.getCPtr(vars), SWIGTYPE_p_std__vectorT_vpsc__Constraint_p_t.getCPtr(cs));
    if (colaPINVOKE.SWIGPendingException.Pending) throw colaPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_vpsc__Variable variable {
    set {
      colaPINVOKE.AlignmentConstraint_variable_set(swigCPtr, SWIGTYPE_p_vpsc__Variable.getCPtr(value));
    } 
    get {
      IntPtr cPtr = colaPINVOKE.AlignmentConstraint_variable_get(swigCPtr);
      SWIGTYPE_p_vpsc__Variable ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_vpsc__Variable(cPtr, false);
      return ret;
    } 
  }

}

}
