LibAvoid Python bindings
========================

Building
--------
To build the Python bindings you should be able to build libavoid as described in the main README file.

To build the bindings you'll need to have Python installed. Also Cython <http://cython.org> is required. This package can be installed by hand or with the help of `easy_install` or `pip`.

Once Python and Cython are in place, simply build the bindings:

  $ python setup.py build_ext --inplace

or do a complete install:

  $ python setup.py install

To execute the test cases, use nose <..>:

  $ nosetests -v

Using libavoid Python bindings
------------------------------

The bindings have been Pythonized to some extend. This should make it more
intuitive for Python users to start using this library.

Changes wrt the C++ implementation:

* Point has been replaced by a tuple (x, y)

* Polygon is a simple list (or tuple) of points: ((0, 0), (4, 0), (4, 4))

* A rectangle is represented as a polygon internally. For this the function
  `rectangle()` helps creating one.

* Adding ConnectionPins to ShapeRef and JunctionRef is done by invoking
  addConnectionPin(...) on the shape/junction.

* ShapeRef, JunctionRef and point can be assigned directly to ConnRef. no
  ConnEnd needs to be created.

* Router.moveShape(shape, dx, dy) is defined as
  Router.moveShapeRel(shape, dx, dy). Same for Router.moveJunction(j, dx, dy).

* To delete ConnRef instances, call Router.removeConn(connRef)
  (the c++ way is to delete the connRef directly).

